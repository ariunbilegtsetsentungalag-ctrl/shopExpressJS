<%- include('include/header') %>

<div class="row justify-content-center min-vh-100 align-items-center">
  <div class="col-lg-5 col-md-7">
    <div class="card shadow-custom rounded-custom border-0">
      <!-- Header -->
      <div class="card-header bg-gradient-primary text-white text-center border-0 rounded-top-custom">
        <div class="py-3">
          <i class="fas fa-user-plus fa-3x mb-3"></i>
          <h2 class="mb-1"><%- __('join_us_today') %></h2>
          <p class="mb-0 opacity-75"><%- __('create_account_to_get_started') %></p>
        </div>
      </div>
      
      <!-- Body -->
      <div class="card-body p-5">
        <form action="/signup" method="POST" class="needs-validation" novalidate>
          <div class="mb-4">
            <label for="username" class="form-label">
              <i class="fas fa-user me-2 text-primary"></i><%- __('username') %>
            </label>
            <div class="position-relative">
              <input type="text" 
                     class="form-control form-control-lg" 
                     id="username" 
                     name="username" 
                     placeholder="<%- __('choose_username') %>"
                     minlength="3"
                     autocomplete="off"
                     required>
              <div class="position-absolute end-0 top-50 translate-middle-y me-3" id="usernameStatus" style="display: none;">
                <i class="fas fa-spinner fa-spin text-muted" id="usernameLoading"></i>
                <i class="fas fa-check text-success" id="usernameAvailable" style="display: none;"></i>
                <i class="fas fa-times text-danger" id="usernameTaken" style="display: none;"></i>
              </div>
            </div>
            <div class="invalid-feedback" id="usernameError">
              <%- __('username_must_be_at_least') %>
            </div>
            <!-- Username availability message -->
            <div class="form-text mt-2" id="usernameMessage" style="display: none;"></div>
            <!-- Username suggestions -->
            <div class="mt-2" id="usernameSuggestions" style="display: none;">
              <small class="text-muted d-block mb-2"><%- __('suggested_usernames') || 'Suggested usernames:' %></small>
              <div class="d-flex flex-wrap gap-2" id="suggestionButtons"></div>
            </div>
          </div>
          
          <div class="mb-4">
            <label for="email" class="form-label">
              <i class="fas fa-envelope me-2 text-primary"></i><%- __('email') %>
            </label>
            <input type="email" 
                   class="form-control form-control-lg" 
                   id="email" 
                   name="email" 
                   placeholder="<%- __('enter_email_signup') %>"
                   required>
            <div class="invalid-feedback">
              <%- __('please_provide_valid_email') %>
            </div>
          </div>
          
          <div class="mb-4">
            <label for="password" class="form-label">
              <i class="fas fa-lock me-2 text-primary"></i><%- __('password') %>
            </label>
            <div class="position-relative">
              <input type="password" 
                     class="form-control form-control-lg" 
                     id="password" 
                     name="password" 
                     placeholder="<%- __('create_password') %>"
                     minlength="6"
                     required>
              <button type="button" 
                      class="btn btn-link position-absolute end-0 top-50 translate-middle-y"
                      onclick="togglePassword()">
                <i class="fas fa-eye" id="toggleIcon"></i>
              </button>
            </div>
            <div class="invalid-feedback">
              <%- __('password_must_be_at_least') %>
            </div>
            <div class="form-text">
              <small class="text-muted">
                <i class="fas fa-info-circle me-1"></i>
                <%- __('password_must_be_at_least') %>
              </small>
            </div>
          </div>
          
          <div class="mb-4">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="terms" required>
              <label class="form-check-label" for="terms">
                <%- __('agree_to_terms') %>
              </label>
              <div class="invalid-feedback">
                <%- __('agree_to_terms') %>
              </div>
            </div>
          </div>
          
          <div class="d-grid mb-4">
            <button type="submit" class="btn btn-primary btn-lg">
              <i class="fas fa-user-plus me-2"></i><%- __('create_account') %>
            </button>
          </div>
        </form>
        
        <!-- Divider -->
        <div class="text-center mb-4">
          <span class="text-muted"><%- __('already_have_account') %></span>
        </div>
        
        <!-- Login Link -->
        <div class="d-grid">
          <a href="/login" class="btn btn-outline-primary btn-lg">
            <i class="fas fa-sign-in-alt me-2"></i><%- __('sign_in_here') %>
          </a>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  body {
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    min-height: 100vh;
  }
  
  .rounded-top-custom {
    border-top-left-radius: var(--radius-xl) !important;
    border-top-right-radius: var(--radius-xl) !important;
  }
  
  .form-control:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 0.2rem rgba(37, 99, 235, 0.25);
  }
  
  #usernameStatus {
    z-index: 10;
  }
  
  .username-available {
    border-color: #28a745 !important;
  }
  
  .username-taken {
    border-color: #dc3545 !important;
  }
  
  #usernameSuggestions .btn {
    margin-bottom: 0.25rem;
    font-size: 0.875rem;
  }
  
  #usernameSuggestions .btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
</style>  .form-check-input:checked {
    background-color: var(--secondary-color);
    border-color: var(--secondary-color);
  }
</style>

<script>
  let usernameCheckTimeout;
  let lastCheckedUsername = '';

  function togglePassword() {
    const passwordInput = document.getElementById('password');
    const toggleIcon = document.getElementById('toggleIcon');
    
    if (passwordInput.type === 'password') {
      passwordInput.type = 'text';
      toggleIcon.classList.remove('fa-eye');
      toggleIcon.classList.add('fa-eye-slash');
    } else {
      passwordInput.type = 'password';
      toggleIcon.classList.remove('fa-eye-slash');
      toggleIcon.classList.add('fa-eye');
    }
  }

  function showUsernameStatus(type) {
    const statusContainer = document.getElementById('usernameStatus');
    const loading = document.getElementById('usernameLoading');
    const available = document.getElementById('usernameAvailable');
    const taken = document.getElementById('usernameTaken');

    // Hide all first
    loading.style.display = 'none';
    available.style.display = 'none';
    taken.style.display = 'none';

    if (type === 'loading') {
      statusContainer.style.display = 'block';
      loading.style.display = 'inline';
    } else if (type === 'available') {
      statusContainer.style.display = 'block';
      available.style.display = 'inline';
    } else if (type === 'taken') {
      statusContainer.style.display = 'block';
      taken.style.display = 'inline';
    } else {
      statusContainer.style.display = 'none';
    }
  }

  function showUsernameMessage(message, type = 'info') {
    const messageElement = document.getElementById('usernameMessage');
    if (message) {
      messageElement.textContent = message;
      messageElement.className = `form-text mt-2 text-${type === 'success' ? 'success' : type === 'error' ? 'danger' : 'muted'}`;
      messageElement.style.display = 'block';
    } else {
      messageElement.style.display = 'none';
    }
  }

  function showUsernameSuggestions(suggestions) {
    const suggestionsContainer = document.getElementById('usernameSuggestions');
    const buttonsContainer = document.getElementById('suggestionButtons');
    
    if (suggestions && suggestions.length > 0) {
      buttonsContainer.innerHTML = '';
      suggestions.forEach(suggestion => {
        const button = document.createElement('button');
        button.type = 'button';
        button.className = 'btn btn-outline-primary btn-sm';
        button.textContent = suggestion;
        button.onclick = () => {
          document.getElementById('username').value = suggestion;
          checkUsernameAvailability(suggestion);
          suggestionsContainer.style.display = 'none';
        };
        buttonsContainer.appendChild(button);
      });
      suggestionsContainer.style.display = 'block';
    } else {
      suggestionsContainer.style.display = 'none';
    }
  }

  async function checkUsernameAvailability(username) {
    const usernameInput = document.getElementById('username');
    
    if (!username || username.length < 3) {
      showUsernameStatus('');
      showUsernameMessage('');
      showUsernameSuggestions([]);
      usernameInput.classList.remove('username-available', 'username-taken');
      return;
    }

    if (username === lastCheckedUsername) {
      return; // Don't check the same username again
    }

    showUsernameStatus('loading');
    showUsernameMessage('<%- __("checking_availability") %>', 'info');
    showUsernameSuggestions([]);

    try {
      const response = await fetch(`/api/check-username/${encodeURIComponent(username)}`);
      const data = await response.json();
      
      lastCheckedUsername = username;

      const usernameInput = document.getElementById('username');
      
      if (data.available) {
        showUsernameStatus('available');
        showUsernameMessage(data.message, 'success');
        showUsernameSuggestions([]);
        usernameInput.classList.remove('username-taken');
        usernameInput.classList.add('username-available');
      } else {
        showUsernameStatus('taken');
        showUsernameMessage(data.message, 'error');
        showUsernameSuggestions(data.suggestions);
        usernameInput.classList.remove('username-available');
        usernameInput.classList.add('username-taken');
      }
    } catch (error) {
      console.error('Error checking username:', error);
      showUsernameStatus('');
      showUsernameMessage('Error checking username availability', 'error');
      showUsernameSuggestions([]);
    }
  }

  // Add event listener when page loads
  document.addEventListener('DOMContentLoaded', function() {
    const usernameInput = document.getElementById('username');
    
    usernameInput.addEventListener('input', function() {
      const username = this.value.trim();
      
      // Clear previous timeout
      if (usernameCheckTimeout) {
        clearTimeout(usernameCheckTimeout);
      }
      
      // Set new timeout for 500ms delay
      usernameCheckTimeout = setTimeout(() => {
        checkUsernameAvailability(username);
      }, 500);
    });

    // Clear status when input is focused and empty
    usernameInput.addEventListener('focus', function() {
      if (!this.value.trim()) {
        showUsernameStatus('');
        showUsernameMessage('');
        showUsernameSuggestions([]);
      }
    });
  });
  

  
  // Bootstrap validation
  (function() {
    'use strict';
    window.addEventListener('load', function() {
      var forms = document.getElementsByClassName('needs-validation');
      var validation = Array.prototype.filter.call(forms, function(form) {
        form.addEventListener('submit', function(event) {
          if (form.checkValidity() === false) {
            event.preventDefault();
            event.stopPropagation();
          }
          form.classList.add('was-validated');
        }, false);
      });
    }, false);
  })();
</script>

<%- include('include/footer') %>